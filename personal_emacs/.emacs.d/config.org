#+TITLE: An Emacs Configuration
#+Author: dfireBird
#+Startup: Overview
* Table of Contents :TOC_3:
- [[#preface][Preface]]
- [[#pre-configuration][Pre-Configuration]]
  - [[#initialization][Initialization]]
  - [[#garbage-collection][Garbage Collection]]
- [[#package-setup][Package Setup]]
  - [[#package-installer][Package Installer]]
  - [[#shell-paths][Shell paths]]
- [[#variables][Variables]]
- [[#functions][Functions]]
- [[#startup][Startup]]
  - [[#backup][Backup]]
  - [[#keybindings][Keybindings]]
    - [[#which-key][Which-key]]
    - [[#multiple-cursors][Multiple-Cursors]]
    - [[#ace-window][Ace Window]]
  - [[#appearance][Appearance]]
    - [[#genreal-gui][Genreal GUI]]
    - [[#theme][Theme]]
    - [[#font][Font]]
    - [[#doom-mode-line][Doom mode line]]
    - [[#zoom][Zoom]]
    - [[#diff-hl][Diff-hl]]
    - [[#hl-todo][Hl-todo]]
  - [[#interface][Interface]]
    - [[#completion-frontend][Completion Frontend]]
    - [[#splash-screen][Splash Screen]]
    - [[#confirmation-messages][Confirmation Messages]]
  - [[#terminal][Terminal]]
  - [[#wakatime][Wakatime]]
  - [[#spell-check][Spell Check]]
  - [[#input][Input]]
- [[#programming][Programming]]
  - [[#general][General]]
    - [[#interactive][Interactive]]
  - [[#projectile][Projectile]]
  - [[#magit][Magit]]
  - [[#linters][Linters]]
    - [[#flycheck][Flycheck]]
  - [[#formatters][Formatters]]
  - [[#documenation][Documenation]]
- [[#lsp-and-dap][LSP and DAP]]
    - [[#lsp][LSP]]
    - [[#lsp-ui][LSP-UI]]
    - [[#debug-adapter-protocol-dap][Debug Adapter Protocol (DAP)]]
  - [[#treemacs][Treemacs]]
  - [[#code-completion][Code completion]]
    - [[#company][Company]]
  - [[#snippets][Snippets]]
  - [[#tramp][TRAMP]]
  - [[#mmm-mode][MMM-mode]]
- [[#languages][Languages]]
  - [[#htmlcss][HTML/CSS]]
  - [[#javascipt--typescript][JavaScipt / TypeScript]]
    - [[#react-config][React config]]
  - [[#cc][C/C++]]
    - [[#cmake][CMake]]
    - [[#ccls][CCLS]]
  - [[#rust][Rust]]
  - [[#golang][Golang]]
  - [[#racket][Racket]]
  - [[#elixir][Elixir]]
  - [[#haskell][Haskell]]
  - [[#python][Python]]
  - [[#dart][Dart]]
  - [[#gdscript][GdScript]]
  - [[#glsl][GLSL]]
- [[#literate-languages][Literate Languages]]
  - [[#org][Org]]
    - [[#table-of-contents][Table of Contents]]
    - [[#bullets][Bullets]]
- [[#data][Data]]
  - [[#docker][Docker]]
  - [[#yaml][Yaml]]
  - [[#graphql][Graphql]]
  - [[#json][JSON]]
- [[#fun][Fun]]
  - [[#kana][Kana]]
  - [[#game][Game]]

* Preface
    After sometime in spacemacs (interested in emacs a long time 
    never had chance to come), it's time to write my own configuration!
    If you want these you can clone it and do anything as you wish.


    Thanks to [[https://github.com/the-programmers-hangout][TPH]] who made an spolight to help me switch into emacs world 
    after year long usage of VSCode and other IDEs!
    Special thanks to [[https://github.com/kkhan01][Shan]] who gave a lots of dot files I need.

* Pre-Configuration
** Initialization
    Lexical binding suppport globally! (I don't know what it tho?)

#+begin_src emacs-lisp
   ;; -*- lexical-binding: t -*-
#+end_src
** Garbage Collection
    Gargbage Collection is not needed (that's whay they say)
    (maybe needed on old machine - shan)

#+begin_src emacs-lisp
    (eval-and-compile
      (defun srs|revert-gc ()
        ;; reset values
        (setq gc-cons-threshold 16777216
              gc-cons-percentage 0.1
              file-name-handler-alist (append last-file-name-handler-alist
                                                  file-name-handler-alist))
        ;; delete any duplicate values
        (cl-delete-duplicates file-name-handler-alist :test 'equal)
        ;; get rid of temporarily variables
        (makunbound 'last-file-name-handler-alist))

      ;; set everything to efficient limits and save values
      (setq gc-cons-threshold most-positive-fixnum
            gc-cons-percentage 0.6
            last-file-name-handler-alist file-name-handler-alist
            file-name-handler-alist nil)

      (add-hook 'after-init-hook 'srs|revert-gc))
#+end_src
* Package Setup
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Package Installer
    A tool to automatically download the package from sources and loads it
    whenever the packages is in need

#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
  (setq straight-check-for-modifications '(check-on-save find-when-checking))
  (setq use-package-always-demand nil
        use-package-verbose t
        byte-compile-warnings nil)
  (straight-use-package 'use-package)
#+end_src

** Shell paths
#+begin_src emacs-lisp
    (use-package exec-path-from-shell
      :init
      (exec-path-from-shell-initialize))
#+end_src
* Variables
   Variable for the use in this config
#+begin_src emacs-lisp
  (defconst firebird/settings-path (concat user-emacs-directory "settings/settings.el"))
  (message firebird/settings-path)
  (defconst firebird/settings-exist? (file-exists-p firebird/settings-path))

  (when firebird/settings-exist?
    (load-file firebird/settings-path))
#+end_src
* Functions
- Sudo current file
#+begin_src emacs-lisp
  (defun firebird--sudo-file-path (file)
    (let ((host (or (file-remote-p file 'host) "localhost")))
      (concat "/" (when (file-remote-p file)
                    (concat (file-remote-p file 'method) ":"
                            (if-let (user (file-remote-p file 'user))
                                (concat user "@" host)
                              host)
                            "|"))
              "sudo:root@" host
              ":" (or (file-remote-p file 'localname)
                      file))))

  (defun firebird/sudo-this-file ()
    "Open the current file as root"
    (interactive)
    (find-file
     (firebird--sudo-file-path
      (or buffer-file-name
          (when (or (derived-mode-p 'dired-mode)
                    (derived-mode-p 'wdired-mode))
            (default-directory))))))

#+end_src
- UUID-generator
#+begin_src emacs-lisp
  (use-package request)

  (defun firebird--request-uuid ()
    (request-response-data (request
                             "https://www.uuidgenerator.net/api/version4"
                             :sync t)))

  (defun firebird--uuidgen ()
    (replace-regexp-in-string "\n$" "" 
                              (shell-command-to-string "uuidgen")))

  (defun firebird/generate-uuid ()
    "Generates UUID and insert them into buffer at the point invoked"
    (interactive)
    (insert
      (if (string-equal system-type "gnu/linux")
          (firebird--uuidgen)
        (firebird--request-uuid))))

  (defalias 'generate-uuid 'firebird/generate-uuid)
#+end_src
- font set for frame
#+begin_src  emacs-lisp
  (defvar emacs-english-font "Jetbrains Mono"
    "The font name of English.")

  (defvar emacs-cjk-font "Noto Sans CJK JP"
    "The font name for CJK.")

  (defvar emacs-font-size-pair '(13 . 16)
    "Default font size pair for (english . japanese)")

  (defvar emacs-font-size-pair-list
    '(( 5 .  6) (10 . 12)
      (13 . 16) (15 . 18) (17 . 20)
      (19 . 22) (20 . 24) (21 . 26)
      (24 . 28) (26 . 32) (28 . 34)
      (30 . 36) (34 . 40) (36 . 44))
    "This list is used to store matching (englis . chinese) font-size.")

  (defun font-exist-p (fontname)
    "Test if this font is exist or not."
    (if (or (not fontname) (string= fontname ""))
        nil
      (if (not (x-list-fonts fontname)) nil t)))

  (defun set-font (english japanese size-pair)
    "Setup emacs English and Japanese font on x window-system."

    (if (font-exist-p english)
        (set-frame-font (format "%s:pixelsize=%d" english (car size-pair)) t))

    (if (font-exist-p japanese)
        (dolist (charset '(kana han symbol cjk-misc bopomofo))
          (set-fontset-font (frame-parameter nil 'font) charset
                            (font-spec :family japanese :size (cdr size-pair))))))

  (defun emacs-step-font-size (step)
    "Increase/Decrease emacs's font size."
    (let ((scale-steps emacs-font-size-pair-list))
      (if (< step 0) (setq scale-steps (reverse scale-steps)))
      (setq emacs-font-size-pair
            (or (cadr (member emacs-font-size-pair scale-steps))
                emacs-font-size-pair))
      (when emacs-font-size-pair
        (message "emacs font size set to %.1f" (car emacs-font-size-pair))
        (set-font emacs-english-font emacs-cjk-font emacs-font-size-pair))))

  (defun increase-emacs-font-size ()
    "Decrease emacs's font-size acording emacs-font-size-pair-list."
    (interactive) (emacs-step-font-size 1))

  (defun decrease-emacs-font-size ()
    "Increase emacs's font-size acording emacs-font-size-pair-list."
    (interactive) (emacs-step-font-size -1))
#+end_src
* Startup
** Backup
    Backups are take hella time to clean and it's so ugly
#+begin_src emacs-lisp
    (setq-default backup-inhibited t
                  auto-save-default nil
                  create-lockfiles nil
                  make-backup-files nil)
#+end_src
** Keybindings
*** Which-key
#+begin_src emacs-lisp
    (use-package which-key
      :init
      (which-key-mode))
#+end_src

*** Multiple-Cursors
   Multiple cursors is one of features I used in VSCode now I can use it here
   too
#+begin_src emacs-lisp
    (use-package multiple-cursors
      :bind
      ("C->" . mc/mark-next-like-this)
      ("C-<" . mc/mark-previous-like-this)
      ("C-s-e" . mc/edit-lines))

    (global-unset-key (kbd "M-<down-mouse-1>"))
    (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)
#+end_src
*** Ace Window
#+begin_src emacs-lisp
    (use-package ace-window
      :bind
      ("M-o" . ace-window))
#+end_src
** Appearance
*** Genreal GUI
    The config to disable menu, tool and scroll bars
#+begin_src emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
#+end_src
*** Theme
    Doom-theme especially for doom-modeline
#+begin_src emacs-lisp
    (use-package doom-themes
      :config
      (setq doom-themes-enable-bold t
            doom-themes-enable-italic t)
      (load-theme 'doom-gruvbox t)

      (doom-themes-visual-bell-config)
      (setq doom-themes-treemacs-theme "doom-colors")
      (doom-themes-treemacs-config)
      
      (doom-themes-org-config))
#+end_src

*** Font
#+begin_src emacs-lisp
  (use-package nerd-icons)

  (defun aorst/font-installed-p (font-name)
    "Check if font with FONT-NAME is available."
    (if (find-font (font-spec :name font-name))
        t
      nil))
  (use-package all-the-icons
    :config
    (when (and (not (aorst/font-installed-p "all-the-icons"))
               (window-system))
      (all-the-icons-install-fonts t)))

  (set-face-attribute 'default nil
                      :family "JetBrains Mono"
                      :weight 'semi-light
                      :height 100)
  (set-face-attribute 'mode-line nil
                      :family "JetBrains Mono"
                      :weight 'semi-light
                      :height 100)
  (set-face-attribute 'mode-line-inactive nil
                      :family "JetBrains Mono"
                      :weight 'semi-light
                      :height 100)

  (when (fboundp #'set-fontset-font)
    (set-fontset-font t 'chinese-gbk
                      (font-spec :family "Noto Sanks CJK SC"))
    (set-fontset-font t 'japanese-jisx0213.2004-1
                      (font-spec :family "Noto Sans CJK JP")))

  (use-package emojify
    :init
    (global-emojify-mode)
    :bind
    ("C-x C-i" . emojify-insert-emoji))

  (use-package ligature
    :straight (:host github :repo "mickeynp/ligature.el")
    :config
    ;; Enable all JetBrains Mono ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->" "///" "/=" "/=="
                                         "/>" "//" "/*" "*>" "***" "*/" "<-" "<<-" "<=>" "<=" "<|" "<||"
                                         "<|||" "<|>" "<:" "<>" "<-<" "<<<" "<==" "<<=" "<=<" "<==>" "<-|"
                                         "<<" "<~>" "<=|" "<~~" "<~" "<$>" "<$" "<+>" "<+" "</>" "</" "<*"
                                         "<*>" "<->" "<!--" ":>" ":<" ":::" "::" ":?" ":?>" ":=" "::=" "=>>"
                                         "==>" "=/=" "=!=" "=>" "===" "=:=" "==" "!==" "!!" "!=" ">]" ">:"
                                         ">>-" ">>=" ">=>" ">>>" ">-" ">=" "&&&" "&&" "|||>" "||>" "|>" "|]"
                                         "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||" ".." ".?" ".=" ".-" "..<"
                                         "..." "+++" "+>" "++" "[||]" "[<" "[|" "{|" "??" "?." "?=" "?:" "##"
                                         "###" "####" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" ";;" "_|_"
                                         "__" "~~" "~~>" "~>" "~-" "~@" "$>" "^=" "]#"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src

*** Doom mode line
    Needed for modeline features
#+begin_src emacs-lisp
  (line-number-mode t)
  (column-number-mode t)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src
    Doom mode line is custome mode line with several unqiue features
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode)
    :config
    (setq doom-modeline-icon t
          doom-modeline-percent-position nil
          doom-modeline-major-mode-icon t
          doom-modeline-buffer-encoding nil
          doom-modeline-buffer-file-name-style 'relative-from-project
          doom-modeline--battery-status t
          doom-modeline-github t
          doom-modeline-lsp t))

  (use-package nyan-mode
    :init (nyan-mode t)
    :config
    (setq nyan-animate-nyancat t)
    (setq nyan-wavy-trail t)
    (setq nyan-bar-length 25)
    (nyan-start-animation))
#+end_src
*** Zoom
    Zoom manages window size
#+begin_src emacs-lisp
(use-package zoom
  :bind
  ("C-x +" . zoom)
  :config
  (setq zoom-mode t))
#+end_src
*** Diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :hook
    ((magit-pre-refresh  . diff-hl-magit-pre-refresh)
     (magit-post-refresh . diff-hl-magit-post-refresh))
    :config
    (global-diff-hl-mode))
#+end_src
*** Hl-todo
#+begin_src emacs-lisp
  (use-package hl-todo
    :hook (prog-mode  .  hl-todo-mode)
    :config
      (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

** Interface
*** Completion Frontend
    Ivy is minimal and custom completion frontend which I'm going to use
#+begin_src emacs-lisp
  (use-package ivy
    :bind
    ("C-x b" . ivy-switch-buffer)
    :config
    (setq ivy-use-virtual-buffers t
          enable-recursive-mini-buffers t)
    (ivy-mode))

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

  (use-package counsel
    :bind
    ("C-x C-f" . counsel-find-file)
    ("M-x" . counsel-M-x)
    ("C-h f" . counsel-describe-function)
    ("C-h v" . counsel-describe-variable))

  (use-package counsel-projectile)

  (use-package swiper
    :bind
    ("C-s" . swiper-isearch)
    ("C-r" . swiper-isearch-backward))
#+end_src
*** Splash Screen
#+begin_src emacs-lisp
  (use-package page-break-lines)
  (use-package recentf
    :straight nil
    :config
    (setq recentf-exclude '("\\/home/firebird/Projects/agenda"
                           "languages.org"
                           "tech.org"
                           "birdtorrent.org"
                           "COMMIT_EDITMSG")))

  (use-package dashboard
    :config
    (setq dashboard-center-content t
          dashboard-set-file-icons t
          dashboard-startup-banner 'logo
          dashboard-page-separator "\n\f\n"
          dashboard-projects-backend 'projectile
          dashboard-display-icons-p t
          dashboard-icon-type 'nerd-icons)
    (setq dashboard-items '((projects . 5)
                            (recents . 5)
                            (agenda . 5)))
    (dashboard-setup-startup-hook))
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
*** Confirmation Messages
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p (lambda (&rest _) t))
  (setq-default confirm-kill-emacs nil)
  (setq save-abbrevs t)
  (setq-default abbrev-mode t)
  (setq save-abbrevs 'silently)
#+end_src
** Terminal
    Vterm is used for built-in terminal emulator for emacs
#+begin_src emacs-lisp
    (use-package vterm
      :commands (vterm)
      :bind
      ("C-c t" . vterm))
#+end_src
** Wakatime
    Wakatime is used to monitor my coding activity
#+begin_src emacs-lisp
    (use-package wakatime-mode
      :if (and (executable-find "wakatime") (boundp 'wakatime-api-key))
      :config
      (setq wakatime-cli-path (executable-find "wakatime"))
      :init
      (global-wakatime-mode))
#+end_src
** Spell Check
   I'm using flyspell here for spell check.
#+begin_src emacs-lisp
  ;; (dolist (hook '(text-mode-hook))
  ;;   (add-hook hook (lambda () (flyspell-mode 1))))
  ;; (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  ;;   (add-hook hook (lambda () (flyspell-mode -1))))
#+end_src
** Input
#+begin_src emacs-lisp
  (use-package mozc :straight nil)
#+end_src
* Programming
** General
*** Interactive
#+begin_src emacs-lisp
  (electric-pair-mode)
  (show-paren-mode)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package paren
    :config
    (show-paren-mode t))

  (use-package origami
    :hook (prog-mode . origami-mode)
    :bind
    (:map origami-mode
          ("C-c C-<tab>" . origami-toggle-node)))


  (use-package smartparens
    :hook
    (prog-mode . smartparens-mode)
    :config
    (setq sp-escape-quotes-after-insert nil)
    (require 'smartparens-config))

  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :config (setq highlight-indent-guides-method 'character))

  (setq-default indent-tabs-mode nil)
#+end_src
** Projectile
    Projectile give emacs the project management features and have version 
    control intergration as well

#+begin_src emacs-lisp
  (use-package projectile
    :config
    ;; Useful for CMake-based project and use of ccls with C/C++
    (setq projectile-project-root-files-top-down-recurring
     (append
      '("compile_commands.json" ".ccls")
      '("pubspec.yaml" "BUILD")
      projectile-project-root-files-top-down-recurring))
    (setq projectile-globally-ignored-directories
     (append
      '("build" "CMakeFiles" ".ccls-cache")
      projectile-globally-ignored-directories))
    (setq projectile-globally-ignored-files
     (append
      '("cmake_install.cmake")
      projectile-globally-ignored-files))
    (setq projectile-project-search-path '("~/Projects")
          projectile-enable-caching t
          projectile-require-project-root t
          projectile-sort-order 'access-time
          projectile-completion-system 'ivy)
    :bind
    ([f5] . projectile-run-project)
    :init
    (projectile-mode))

  (use-package projectile-ripgrep)

  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src
** Magit
    Magit is git interface for Emacs which is similar to git tools in many IDEs
    and text-editors

#+begin_src emacs-lisp
  (use-package magit
    :init (setq project-switch-commands 't)
    :bind
    ("C-x g" . magit)
    :config
    (transient-append-suffix 'magit-fetch "-p"
       '("-t" "Fetch all tags" ("-t" "--tags")))
    (transient-append-suffix 'magit-pull "-r"
       '("-a" "Autostash" "--autostash")))

  (use-package forge
    :after magit
    :config
    (setq auth-sources '("~/.authinfo")))
#+end_src
** Linters
*** Flycheck
    Flycheck is popular linter interface for emacs that allow external linters
    to use in emacs! 
    
#+begin_src emacs-lisp
    (use-package flycheck
      :hook (after-init . global-flycheck-mode)
      :custom-face
      (flycheck-info ((t (:underline (:style line)))))
      (flycheck-warning ((t (:underline (:style line)))))
      (flycheck-error ((t (:underline (:style line)))))

      :config
      (setq flycheck-check-syntax-automatically '(save mode-enabled)))
#+end_src
** Formatters
#+begin_src emacs-lisp
  (use-package reformatter)
#+end_src
** Documenation
    Eldoc shows arguments for function overloads in echo area
#+begin_src emacs-lisp
    (use-package eldoc
      :straight nil
      :hook (after-init . global-eldoc-mode))
#+end_src

* LSP and DAP
*** LSP
    LSP gives IDE-like features to Emacs and add features : semantic
    higlighting, auto-completion and others

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :config
    (setq lsp-logo-io t
          lsp-semantic-tokens-enable t
          lsp-inlay-hint-enable t
          lsp-keep-workspace-alive nil
          lsp-headerline-breadcrumb-enable nil)
    :bind (:map lsp-mode-map ("C-c C-c a" . lsp-execute-code-action)))
#+end_src
*** LSP-UI
    This package give UI to LSP server such as popups and visual indicators.
#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :bind (:map lsp-mode-map
                ("M-]" . lsp-ui-sideline-apply-code-actions)
                ("M-." . lsp-ui-peek-find-definitions)
                ("M-?" . lsp-ui-peek-find-references)
                ("M-j" . lsp-ui-imenu))
    :config
      (setq lsp-ui-doc-delay 0.6
            lsp-ui-flycheck-enable t
            lsp-ui-sideline-show-code-actions t
            lsp-ui-peek-always-show t))
#+end_src

*** Debug Adapter Protocol (DAP)
    DAP is analogous to LSP.
#+begin_src emacs-lisp
    (use-package dap-mode
      :after lsp-mode
      :config
      (dap-mode t)
      (dap-ui-mode t))

    (use-package dap-chrome
      :straight nil)

    (use-package dap-node
      :straight nil)

#+end_src

** Treemacs
   Treemacs is used for IDE-like file tree.

#+begin_src emacs-lisp
  (use-package treemacs
    :bind (:map global-map
                ("C-x t t"  . treemacs)
                ("C-x t 1"  . treemacs-select-window)
                ("M-0"      . treemacs-select-window))
    :config
    (setq treemacs-resize-icons 4
          treemacs-width 25))

    (use-package lsp-treemacs
      :init
      (lsp-treemacs-sync-mode 4))

    (use-package treemacs-projectile
      :after treemacs projectile)

    (use-package treemacs-magit
      :after treemacs magit)

    (use-package treemacs-icons-dired
      :after treemacs dired
      :config (treemacs-icons-dired-mode))
#+end_src

** Code completion
    There are several code completion backends and frontends! Company and auto-
    complete are popular.
*** Company
    Company is popular code completion  package which is used often. It's 
    a frontend and it's needs a server/backend to function

#+begin_src emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :bind (:map company-mode-map
                ("C-;" . company-complete))
    :config
    (setq company-idle-delay 0.5
          company-tooltip-align-annotation t
          company-minimum-prefix-length 0))

  (use-package company-web
    :straight (company-web
                :type git :host github :repo "osv/company-web"))
#+end_src
**** Company Box
#+begin_src emacs-lisp
    (use-package company-box
      :hook (company-mode . company-box-mode))
#+end_src
** Snippets
    Snippets template provided by YASnippets it make snippet easier
#+begin_src emacs-lisp
    (use-package yasnippet
      :config
      (use-package yasnippet-snippets)
      (yas-reload-all)
      (add-hook 'prog-mode-hook 'yas-minor-mode)
      (add-hook 'text-mode-hook 'yas-minor-mode)
      :bind (:map company-mode-map
                  ("M-[" . yas-expand)))
#+end_src
** TRAMP
Used especially for editing file with root permissions
#+begin_src emacs-lisp
  (use-package tramp
    :straight nil
    :config
    ;; apparently it's faster mentioned by kkhan01
    (setq tramp-default-method "ssh")
    (setq password-cache-expiry nil))
#+end_src
** MMM-mode
#+begin_src  emacs-lisp
  (use-package mmm-mode)
  ;; (require 'mmm-auto)
  (setq mmm-global-mode 'maybe)
  (setq mmm-submode-decoration-level 0)
#+end_src
* Languages
** HTML/CSS
    Emmet auto completion is used for HTML and CSS.

#+begin_src emacs-lisp
  (use-package emmet-mode
    :hook ((css-mode php-mode sgml-mode rjsx-mode web-mode) . emmet-mode))
  (use-package web-mode
    :hook(web-mode . lsp)
    :mode
    (("\\.html?\\'"     .    web-mode)
     ("\\.phtml\\'"     .    web-mode)
     ("\\.tpl\\.php\\'" .    web-mode)
     ("\\.[agj]sp\\'"   .    web-mode)
     ("\\.as[cp]x\\'"   .    web-mode)
     ("\\.erb\\'"       .    web-mode)
     ("\\.mustache\\'"  .    web-mode)
     ("\\.djhtml\\'"    .    web-mode)
     ("\\.heex\\'"      .    web-mode))
   :config
    (add-to-list 'lsp-language-id-configuration ('web-mode . "html"))
    (defadvice company-in-string-or-comment (around company-in-string-or-comment-hack activate)
    (if (memq major-mode '(php-mode html-mode web-mode nxml-mode))
        (setq ad-return-value nil)
      ad-do-it)))

#+end_src

** JavaScipt / TypeScript
    The usage of react and variety of standards has made it hard to configure

#+begin_src emacs-lisp
  (use-package typescript-mode
    :hook
    (typescript-mode . lsp)
    :mode (("\\.ts\\'" . typescript-mode)))

  (use-package prettier-js
    :bind ("C-c f")
    :hook
    ((js-mode . prettier-js-mode)
     (typescript-mode . prettier-js-mode)
     (rjsx-mode . prettier-js-mode)
     (json-mode . prettier-js-mode)))
  (use-package add-node-modules-path
    :hook ((web-mode rjsx-mode). add-node-modules-path))
#+end_src

*** React config
    Should not bind rjsx with tsx mode

#+begin_src emacs-lisp
  (use-package rjsx-mode
    :hook
    (rjsx-mode . lsp)
    :mode
    (("\\.js\\'"   . rjsx-mode)
     ("\\.jsx\\'"  . rjsx-mode)
     ("\\.json\\'" . json-mode))
    :magic ("/\\*\\* @jsx React\\.Dom \\*/" "^import React")
    :init
    (setq-default rjsx-basic-offset 2)
    (setq-default rjsx-global-externs '("module" "require" "assert" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON")))

  (use-package react-snippets
    :after yasnippet)
#+end_src


** C/C++
    No install is needed for C/C++ and its available as a core mode.

#+begin_src emacs-lisp
    (setq c-basic-offset 4)
    (setq c-default-style
          '((java-mode . "java")
            (awk-mode . "awk")
            (other . "k&r")))
    (setq c-doc-comment-style
          '((c-mode . javadoc)
            (java-mode . javadoc)
            (pike-mode . autodoc)))

    (use-package c-mode
      :straight nil
      :hook (c-mode . lsp)
            (c-mode . (lambda () (funcall 'electric-pair-mode -1))))

    (use-package c++-mode
      :straight nil
      :hook (c++-mode . lsp)
            (c++-mode . (lambda () (funcall 'electric-pair-mode -1))))

    (setq gdb-many-windows t)
#+end_src

*** CMake 
    CMake is popular build tool and used popular C++ oss I contribrute

#+begin_src emacs-lisp
    (use-package cmake-mode
      :mode
      (("CMakeLists\\.txt\\'" . cmake-mode)
       ("CMakeCache\\.txt\\'" . cmake-mode)
       ("\\.cmake\\'" . cmake-mode))
      :config
      (setq cmake-tab-width 4))
#+end_src 

*** CCLS
    CCLS has more features support than Clangd, like semantic highlighting...
#+begin_src emacs-lisp
      (use-package ccls
        :after lsp-mode
        :config
        (setq ccls-initialization-options '(:index (:threads 1))
              ccls-sem-highlight-method 'font-lock)
        (ccls-use-default-rainbow-sem-highlight)
        :hook ((c-mode c++-mode) . (lambda ()
                                     (require 'ccls)
                                     (lsp))))
#+end_src
** Rust
#+begin_src emacs-lisp
  (use-package rustic
    :config
    (setq rustic-ansi-faces ansi-color-names-vector
          rustic-format-on-save t
          rustic-indent-method-chain t
          rustic-lsp-server 'rust-analyzer)
    :bind (:map rustic-mode-map
                ("C-c C-c C-a"  . rustic-cargo-add)
                ("C-C C-r" . lsp-rust-analyzer-run)))

    (use-package lsp-rust
      :straight nil
      :config
      (setq lsp-rust-analyzer-diagnostics-enable-experimental t))

#+end_src

** Golang
#+begin_src emacs-lisp
  (use-package go-mode
    :if (and (executable-find "go") (executable-find "bingo"))
    :hook
    (go-mode . lsp)
    :mode "\\.go\\'"
    :bind (:map go-mode-map
                ("C-c C-n"  .  go-run))
    :config
    (add-hook 'before-save-hook #'gofmt-before-save))

  (use-package gotest
    :after go)

  (use-package go-tag
    :after go
    :config
    (setq go-tag-args (list "-transform" "camelcase")))

#+end_src
** Racket
#+begin_src emacs-lisp
    (use-package racket-mode
      :mode "\\.rkt\\'"
      :hook (racket-mode . racket-xp-mode)
      :bind (:map racket-mode-map
                  ("C-c C-r" . racket-run)))
#+end_src
** Elixir
#+begin_src emacs-lisp
  (use-package alchemist
    :hook 
    (alchemist-mode . (lambda ()
                        (message "company")
                        (setq-local company-backends '(company-capf alchemist-company company-bbdb company-semantic company-cmake company-clang company-files
                                                                    (company-dabbrev-code company-gtags company-etags company-keywords)
                                                                    company-oddmuse company-dabbrev)))))
  (use-package elixir-mode
    :hook (elixir-mode . company-mode)
          (elixir-mode . lsp))

  (use-package flycheck-credo
    :init (flycheck-credo-setup)
    :hook (elixir-mode . flycheck-mode))
#+end_src
** Haskell
Let's go pure fp
#+begin_src emacs-lisp
  (use-package haskell-mode
    :mode "\\.hs\\'"
    :config (setq haskell-indentation-left-offset 4)
    :hook
    (haskell-mode . lsp))

  (use-package lsp-haskell)

  (use-package haskell-snippets)
#+end_src

Create functions for formatting haskell code using a shell script combining both formoulu and stylish-haskell
#+begin_src emacs-lisp
  ;;;###autoload (autoload 'haskell-format-buffer "current-file" nil t)
  ;;;###autoload (autoload 'haskell-format-region "current-file" nil t)
  ;;;###autoload (autoload 'haskell-format-on-save-mode "current-file" nil t)
  (reformatter-define haskell-format
    :program "~/bin/haskell-format")
  ;;; (define-key haskell-mode-map (kbd "C-c C-f") 'haskell-format-buffer)
  (add-hook 'haskell-mode-hook 'haskell-format-on-save-mode)
#+end_src
** Python
Install Pyls
#+begin_src emacs-lisp
  (use-package python
    :straight nil
    :hook (python-mode . lsp)
    :config
    (setq python-indent 4
          python-fill-docstring-style 'pep-257
          python-indent-guess-indent-offset nil))

  (use-package pyvenv)
  ;; (use-package lsp-pyright
  ;;   :hook (python-mode . lsp))
#+end_src
** Dart
#+begin_src emacs-lisp
    (use-package lsp-dart
      :config
      (setq lsp-dart-sdk-dir "~/Android/flutter/bin/cache/dart-sdk"))

    (use-package dart-mode
      :hook (dart-mode . lsp)
      :config
      (setq dart-format-on-save t))

    ;; Flutter config
    (use-package flutter
      :after dart-mode
      :bind (:map dart-mode-map
              ("C-M-x" . #'flutter-run-or-hot-reload))
      :config
      (setq flutter-sdk-path "~/Android/flutter"))

    (use-package dart-snippets
      :straight (dart-snippets :type git
		 :host github
		 :repo "MYDavoodeh/dart-snippets"
		 :files ("*.el" ("snippets" "snippets/*"))))

    ;; Mimic android stuido's hotreload after save
    (add-hook 'after-save-hook
	  (lambda ()
	    (if (eq major-mode 'dart-mode)
	    (when (get-buffer "*Flutter*")
	      (flutter-run-or-hot-reload)))))
#+end_src

** GdScript
#+begin_src emacs-lisp
  (use-package gdscript-mode
    :hook
    (gdscript-mode . lsp))
#+end_src
** GLSL
#+begin_src emacs-lisp
    (use-package glsl-mode
      :straight (glsl-mode
                  :type git :host github :repo "jimhourihan/glsl-mode")
      :mode ("\\.glsl\\'" . glsl-mode))
#+end_src
* Literate Languages
** Org
   Org is one of the literate languages (like markdown), I started it using
   when I started this config 
#+begin_src emacs-lisp
      ;; (straight-override-recipe
      ;;    '(org :type git :host github :repo "emacsmirror/org" :no-build t))
      (use-package org
        :straight nil
        :mode 
        ("\\.\\(org\\|ORG\\)\\'" . org-mode)
        :config
        (setq org-pretty-entities t)
        :bind ("C-c a" . org-agenda))

    (use-package grip-mode)

    (setq org-agenda-files '("~/Projects/agenda"))
    (defun firebird/org-skip-subtree-if-priority (priority)
      "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY maybe one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))

    (setq org-agenda-custom-commands
          '(("d" "Daily agenda and all TODOs"
             ((tags "PRIORITY=\"A\""
                    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                     (org-agenda-overriding-header "High-priority unfinished tasks:")))
              (alltodo ""
                       ((org-agenda-skip-function '(or (firebird/org-skip-subtree-if-priority ?A)
                                                       (org-agenda-skip-if nil '(scheduled deadline))))
                        (org-agenda-overriding-header "ALL normal priority tasks:"))))
             ((org-agenda-compact-blocks t)))))
#+end_src
*** Table of Contents
   toc-org provides toc without exporting it (useful for Github)
#+begin_src emacs-lisp
    (use-package toc-org
      :after (org)
      :hook
      (org-mode . toc-org-enable))
#+end_src

*** Bullets
    org-bullets provide UTF-8 bullets for heading and others
#+begin_src emacs-lisp
    (use-package org-bullets
      :after (org)
      :hook
      (org-mode . org-bullets-mode))
#+end_src

* Data
** Docker
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :mode
    (("Dockerfile'"      .    dockerfile-mode)
     ("\\.Dockerfile\\'" .    dockerfile-mode))
    :hook (dockerfile-mode . lsp))

  (use-package docker-compose-mode)

  (use-package docker)
#+end_src
** Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode ("\\.yml\\'"  .  yaml-mode)
    :config
    (add-hook 'yaml-mode-hook
      (lambda ()
        (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
#+end_src
** Graphql
#+begin_src emacs-lisp
  (use-package graphql-mode)

  (mmm-add-classes
    '((js-graphql
          :submode graphql-mode
          :face mmm-declaration-submode-face
          :front "[^a-zA-Z]gql`" ;; regex to find the opening tag
          :back "`")))
  (mmm-add-mode-ext-class 'rjsx-mode nil 'js-graphql)
#+end_src
** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :mode
    (("\\.json\\'" . json-mode)))
#+end_src
* Fun
** Kana
    Kana is helper to learn Japanese.
#+begin_src emacs-lisp
    (use-package kana
      :straight (kana :type git :host github :repo "chenyanming/kana"))
#+end_src
** Game
#+begin_src emacs-lisp
(use-package 2048-game)

(use-package monkeytype)
#+end_src
